class Solution {
    public static boolean canFinish(int numCourses, int[][] prerequisites) {
        HashMap<Integer, List<Integer>> umap = new HashMap<>();
        Queue<Integer> queue = new LinkedList<>();
        int count = 0;
        int[] du = new int[numCourses];
        for (int[] pre : prerequisites) {
            du[pre[1]]++;
            if (!umap.containsKey(pre[0])) umap.put(pre[0], new ArrayList<>());
            umap.get(pre[0]).add(pre[1]);
        }
        for (int i = 0; i<numCourses; i++) if (du[i] == 0) queue.add(i);
        while (!queue.isEmpty()){
            int n = queue.poll();
            count++;
            if (umap.containsKey(n)) {
                for (int i : umap.get(n)) {
                    du[i]--;
                    if (du[i] == 0) queue.add(i);
                }
            }
        }
        return count == numCourses;
    }
}