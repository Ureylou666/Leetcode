class Solution {
    public boolean canCross(int[] stones) {
        if (stones[1] != 1) return false;
        if (stones.length == 2) return true;
        List<Integer>[] dp = new ArrayList[stones.length];
        int[] farest = new int[stones.length];
        Arrays.fill(farest, 0);
        for (int i = 0; i<stones.length; i++) dp[i] = new ArrayList<>();
        dp[0].add(0); farest[0] = 1;
        dp[1].add(1); farest[1] = 3;
        for (int i=2; i<stones.length; i++)
            for (int j = 1; j < i; j++) if (farest[j] >= stones[i]){
                for (int k : dp[j])
                    if (stones[i] - stones[j] >= k-1 && stones[i] - stones[j] <= k+1 && !dp[i].contains(stones[i] - stones[j])) {
                        dp[i].add(stones[i] - stones[j]);
                        farest[i] = Math.max(stones[i] + stones[i] - stones[j] +1, farest[i]);
                    }
            }
        return !dp[stones.length - 1].isEmpty();
    }
}