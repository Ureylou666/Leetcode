/**
    * @Description: https://leetcode.com/problems/count-almost-equal-pairs-ii/
    * @Author: Urey Lou
    * @Date: 2024-08-24
    * @Param: [nums]
    * @return: int
    */
    public static int countPairs(int[] nums) {
        int result = 0, temp = 0, k = 0 , n , m;
        int[] tempNum1 = new int[7];
        int[] tempNum2 = new int[7];
        int[] tempNum3 = new int[7];
        HashMap<Integer, Integer> map = new HashMap<>();
        Set<Integer> checked = new HashSet<>();
        Set<Integer> numbers = new HashSet<>();
        for (int i: nums) map.put(i, map.getOrDefault(i, 0) +1);

        for (int key : map.keySet()) if ( !checked.contains(key) ){
            m = map.get(key);
            checked.add(key);
            if (m > 1) result = result + m * (m-1);
            k = key;
            n = 6;
            Arrays.fill(tempNum1, 0);
            while (k>0) {
                tempNum1[n] = k % 10;
                k = k / 10;
                n--;
            }
            numbers.clear();

            for (int p = 0; p < 6; p++) {
                for (int q = p+1; q < 7; q++) if (tempNum1[p] != 0 || tempNum1[q] !=0) {
                    for (int xx = 0; xx < 7; xx++) tempNum2[xx] = tempNum1[xx];
                    temp = tempNum2[p];
                    tempNum2[p] = tempNum2[q];
                    tempNum2[q] = temp;
                    numbers.add(tempNum2[6] + 10 * tempNum2[5] + 100 * tempNum2[4] + 1000 * tempNum2[3] + 10000 * tempNum2[2] + 100000 * tempNum2[1] + 1000000 * tempNum2[0]);

                    for (int pp = 0; pp < 6; pp++) {
                        for (int qq = pp+1; qq < 7; qq++)
                            if ( tempNum2[pp] != 0 || tempNum2[qq] != 0 ) {
                                for (int xx = 0; xx < 7; xx++) tempNum3[xx] = tempNum2[xx];
                                temp = tempNum3[pp];
                                tempNum3[pp] = tempNum2[qq];
                                tempNum3[qq] = temp;
                                numbers.add(tempNum3[6] + 10 * tempNum3[5] + 100 * tempNum3[4] + 1000 * tempNum3[3] + 10000 * tempNum3[2] + 100000 * tempNum3[1] + 1000000 * tempNum3[0]);
                            }
                    }
                }
            }
            numbers.remove(key);
            for (int xx:numbers) if (map.containsKey(xx)) {
               // System.out.println( key + "----" + xx);
                result = result + m * map.get(xx);
            }
        }
        return result / 2;
    }